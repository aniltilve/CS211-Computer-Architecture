#include "eighth.h"

struct _Node_ 
  {
    int element, 
        height; 
    Node* leftChild,
        * rightChild; 
  };

Node* Node_construct(int element, int height, Node* leftChild, Node* rightChild)
  {
     Node* newNode = (Node*)malloc(sizeof(Node) );
     
     newNode->element = element;
     newNode->height = height;
     newNode->leftChild = leftChild; 
     newNode->rightChild = rightChild; 

     return newNode; 
  }

void Node_destroy(Node* node)
  {
		if (node == NULL)
				return; 

    if (node->rightChild != NULL)
      	free(node->rightChild); 
    if (node->leftChild != NULL)
      	Node_destroy(node->leftChild); 

    free(node); 
  }


Node* BinarySearchTree_insert(Node* root, int element, int height)
	{
    if (root == NULL)
      {
				Node* newNode = Node_construct(element, height, NULL, NULL);
				printf("inserted %d\n", newNode->height); 

        return  newNode; 
      }
    else if (element < root->element)
        root->leftChild = BinarySearchTree_insert(root->leftChild, element, height + 1); 
    else if (element > root->element)
        root->rightChild = BinarySearchTree_insert(root->rightChild, element, height + 1); 
    else
    	printf("duplicate\n");

		return root; 
  }

void BinarySearchTree_search(Node* root, int element) 
  {
    if (root == NULL)
        printf("absent\n"); 
    else if (element == root->element)
        printf("present %d\n", root->height); 
    else if (element < root->element)
        BinarySearchTree_search(root->leftChild, element); 
    else
        BinarySearchTree_search(root->rightChild, element); 
  }


int main(int argumentCount, char** argumentVector)
  {
    FILE* textFile = fopen(argumentVector[1], "r"); 

    if (textFile == NULL)
      {
				printf("error\n"); 

        return 1;
      }

		Node* root = NULL; 
    char* string = (char*)malloc(sizeof(char) * 4); 

   	do
			{
				string = fgets(string, 4, textFile); 
				
				if (!string)
						break; 

				if (string[0] == 'i')
						root = BinarySearchTree_insert(root, string[2], 1);
				else 
						BinarySearchTree_search(root, string[2]); 
			}
		while (string); 

    free(string); 
    Node_destroy(root);
    fclose(textFile);

    return 0;  
  }
